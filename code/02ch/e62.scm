(define false #f)
(define true #t)

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set? x (cdr set)))))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let ((x1 (car set1))
            (x2 (car set2)))
        (cond ((= x1 x2)
               (cond ((= x1 x2)
                      (cons x1
                            (intersection-set (cdr set1)
                                              (cdr set2))))
                     ((< x1 x2)
                      (intersection-set (cdr set1) set2))
                     ((< x2 x1)
                      (intersection-set set1 (cdr set2)))))))))

(define (adjoin-set x set)
  (cond ((null? set) (cons x '()))
        ((= (car set) x) set)
        ((< x (car set)) (cons x set))
        (else (cons (car set)
                    (adjoin-set x (cdr set))))))

;; start: implement union-set

(define (union-set a b)
  (if (and (null? a) (null? b))
      '()
      (let ((a1 (car a))
            (b1 (car b)))
        (cond ((= a1 b1) (cons a1 (union-set (cdr a) (cdr b))))
              ((< a1 b1) (cons a1 (union-set (cdr a) b)))
              ((> a1 b1) (cons b1 (union-set a (cdr b))))))))

(define (union-set a b)
  (cond ((and (null? a) (null? b)) '())
        ((and (null? a) (not (null? b))) b)
        ((and (not (null? a)) (null? b)) a)
        (else (let ((a1 (car a))
                    (b1 (car b)))
                (cond ((= a1 b1) (cons a1 (union-set (cdr a) (cdr b))))
                      ((< a1 b1) (cons a1 (union-set (cdr a) b)))
                      ((> a1 b1) (cons b1 (union-set a (cdr b))))
                      (else (error "undefined behaviour")))))))
